<?php

namespace Wearesho\Bobra\Ubki\Tests;

use PHPUnit\Framework\TestCase;

use Wearesho\Bobra\Ubki;

/**
 * Class BaseCollectionTest
 * @internal
 * @package Wearesho\Bobra\Ubki\Tests
 */
class BaseCollectionTest extends TestCase
{
    public const INTEGER_227 = 227;
    public const INTEGER_228 = 228;
    public const INTEGER_229 = 229;

    /** @var Ubki\BaseCollection */
    protected $collection;

    protected function setUp(): void
    {
        $this->collection = new class extends Ubki\BaseCollection
        {
            public const ELEMENT_TYPE = Ubki\Tests\Mocks\ElementMock::class;
        };

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testInstanceWithInvalidArgument(): void
    {
        $this->expectException(\InvalidArgumentException::class);

        new $this->collection([
            new class
            {
            }
        ]);
    }

    public function testAppends(): void
    {
        $this->collection->append(new Ubki\Tests\Mocks\ElementMock(BaseCollectionTest::INTEGER_227));
        $this->collection->append(new Ubki\Tests\Mocks\ElementMock(BaseCollectionTest::INTEGER_228));
        $this->collection->append(new Ubki\Tests\Mocks\ElementMock(BaseCollectionTest::INTEGER_229));

        $this->assertEquals($this->collection->offsetGet(0)->getValue(), static::INTEGER_227);
        $this->assertEquals($this->collection->offsetGet(1)->getValue(), static::INTEGER_228);
        $this->assertEquals($this->collection->offsetGet(2)->getValue(), static::INTEGER_229);
    }

    public function testInvalidElement(): void
    {
        $element = new class
        {
        };
        $elementClassName = get_class($element);

        $this->expectException(\InvalidArgumentException::class);
        $this->expectExceptionMessage(
            "Элемент {$elementClassName} должен быть совместим с " . Ubki\Tests\Mocks\ElementMock::class
        );

        $this->collection->append($element);
    }

    public function testJson(): void
    {
        $this->assertEquals((array)$this->collection, $this->collection->jsonSerialize());
    }

    public function testArrayObjectAccess(): void
    {
        $this->assertEquals(0, count($this->collection));

        $this->testAppends();

        $element = new Ubki\Tests\Mocks\ElementMock(static::INTEGER_228);
        $this->collection[] = $element;

        $this->assertEquals(4, count($this->collection));
        $this->assertEquals($element, $this->collection->offsetGet(3));
    }
}
